name: Desktop App Test

on:
    workflow_dispatch:
    push:
        branches: [ "feature/tls" ]

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
        # checkout the repo
        - name: 'Checkout GitHub Action'
          uses: actions/checkout@main
          
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        
        - name: 'Login to Azure Container Registry'
          uses: azure/docker-login@v1
          with:
            login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            username: ${{ secrets.REGISTRY_USERNAME }}
            password: ${{ secrets.REGISTRY_PASSWORD }}
        - name: 'Build and push image to registry'
          run: |
            docker build -f ./docker/Dockerfile_Github -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/wendzelnntpd:${{ github.sha }} .
            docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/wendzelnntpd:${{ github.sha }}

        - name: 'Deploy to Azure Container Instances'
          uses: 'azure/aci-deploy@v1'
          with:
            resource-group: ${{ secrets.RESOURCE_GROUP }}
            dns-name-label: ${{ secrets.RESOURCE_GROUP }}${{ github.run_number }}
            image: ${{ secrets.REGISTRY_LOGIN_SERVER }}/wendzelnntpd:${{ github.sha }}
            registry-login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
            registry-username: ${{ secrets.REGISTRY_USERNAME }}
            registry-password: ${{ secrets.REGISTRY_PASSWORD }}
            name: wendzelnntpd-${{ github.sha }}
            location: 'Germany West Central'
            ports: '119 563'
        - name: 'Get Container IP'
          id: container-ip
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
                echo "ip=$(az container show --name "wendzelnntpd-${{ github.sha }}" --resource-group WendzelNNTPd --query ipAddress.ip --output tsv)" >> $GITHUB_OUTPUT
        outputs:
            container_ip: ${{steps.container-ip.outputs.ip}}

    second:
        runs-on: ubuntu-latest
        needs: build-and-deploy
        steps:
            - run: echo "${{ needs.build-and-deploy.outputs.container_ip }}"      
    # uat:
    #     runs-on: windows-latest
    #     steps:
    #         - uses: actions/checkout@v3
    #         - uses: FedericoCarboni/setup-ffmpeg@v3
    #           id: setup-ffmpeg
    #           with:
    #             ffmpeg-version: release
    #             architecture: 'x64'
    #             github-token: ${{ github.server_url == 'https://github.com' && github.token || '' }}
    #         - name: Use Node.js
    #           uses: actions/setup-node@v3
    #         - name: Download Dependencies
    #           run: |
    #             curl -L -o WindowsApplicationDriver_1.2.1.msi https://github.com/microsoft/WinAppDriver/releases/download/v1.2.1/WindowsApplicationDriver_1.2.1.msi
    #             curl -L -o python-3.12.4-amd64.exe https://www.python.org/ftp/python/3.12.4/python-3.12.4-amd64.exe
    #             curl -L -o thunderbird-setup.exe "https://download.mozilla.org/?product=thunderbird-128.0esr-SSL&os=win64&lang=en-US"
    #         - name: Enable developer-mode
    #           run : reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1" 
    #         - name: Install Dependencies
    #           run: |
    #             Start-Process msiexec "/i D:\a\WendzelNNTPd\WendzelNNTPd\WindowsApplicationDriver_1.2.1.msi /norestart /qn" -Wait
    #             Write-Output "WinAppDriver installation complete."
    #             Start-Process "D:\a\WendzelNNTPd\WendzelNNTPd\python-3.12.4-amd64.exe" -ArgumentList "/i /qn /S /AllUsers /norestart" -Wait -PassThru 
    #             Write-Output "Python installation complete."
    #             Start-Process "D:\a\WendzelNNTPd\WendzelNNTPd\thunderbird-setup.exe" -ArgumentList "/i /qn /S /AllUsers /norestart" -Wait -PassThru 
    #             Write-Output "Thunderbird installation complete."
    #             python -m ensurepip --upgrade
    #             npm i --location=global appium
    #             pip install Appium-Python-Client
    #             pip install -U pytest
    #             appium driver install windows
    #             Write-Output "installation complete."     
    #         - name: Add WinAppDriver firewall rule
    #           run: netsh advfirewall firewall add rule name="WinAppDriver remote" dir=in action=allow protocol=TCP localport=4723
    #         - name: Add videos directory for appium tests
    #           run: New-Item D:\a\WendzelNNTPd\WendzelNNTPd\user-acceptance-test\videos\ -ItemType Directory -ea 0
    #         - name: Run appium
    #           run: |
    #             Start-Process "C:\npm\prefix\appium" -PassThru
    #             docker -v
    #             python -m pytest D:\a\WendzelNNTPd\WendzelNNTPd\user-acceptance-test\test.py 
    #         - uses: actions/upload-artifact@v4
    #           name: Upload videos
    #           if: always()
    #           with:
    #             name: videos
    #             path: D:\a\WendzelNNTPd\WendzelNNTPd\user-acceptance-test\videos\
    #             retention-days: 1
    cleanup:
        runs-on: ubuntu-latest
        needs: [
            build-and-deploy,
            second
        ]
        if: always()
        steps:
        - name: 'Login via Azure CLI'
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}
        - name: 'Stop container'
          uses: azure/cli@v2
          with:
            azcliversion: latest
            inlineScript: |
                az container stop --name "wendzelnntpd-${{ github.sha }}" --resource-group WendzelNNTPd
        - name: 'Delete container'
          uses: azure/cli@v2
          with:
              azcliversion: latest
              inlineScript: |
                az container delete --name "wendzelnntpd-${{ github.sha }}" --resource-group WendzelNNTPd --yes